# Generated by Django 5.0.8 on 2024-08-10 13:01

import django.contrib.postgres.indexes
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("app", "0002_initial"),
        ("checkout", "0002_initial"),
        ("order", "0002_initial"),
        ("payment", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="transactionevent",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="transactionitem",
            name="app",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="app.app",
            ),
        ),
        migrations.AddField(
            model_name="transactionitem",
            name="checkout",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="payment_transactions",
                to="checkout.checkout",
            ),
        ),
        migrations.AddField(
            model_name="transactionitem",
            name="order",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="payment_transactions",
                to="order.order",
            ),
        ),
        migrations.AddField(
            model_name="transactionitem",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="transactionevent",
            name="transaction",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="events",
                to="payment.transactionitem",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["private_metadata"], name="payment_p_meta_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["metadata"], name="payment_meta_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["order_id", "is_active", "charge_status"],
                name="payment_pay_order_i_f22aa2_gin",
            ),
        ),
        migrations.AddIndex(
            model_name="transactionitem",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["private_metadata"], name="transactionitem_p_meta_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transactionitem",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["metadata"], name="transactionitem_meta_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="transactionitem",
            constraint=models.UniqueConstraint(
                fields=("app_identifier", "idempotency_key"),
                name="unique_transaction_idempotency",
            ),
        ),
        migrations.AddConstraint(
            model_name="transactionevent",
            constraint=models.UniqueConstraint(
                fields=("transaction_id", "idempotency_key"),
                name="unique_transaction_event_idempotency",
            ),
        ),
    ]
