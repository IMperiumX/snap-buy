# Generated by Django 5.0.8 on 2024-08-09 15:00

import django.contrib.postgres.indexes
import django_countries.fields
import snap_buy.core.utils.json_serializer
import snap_buy.users.models
from django.db import migrations, models

from django.contrib.postgres.operations import TrigramExtension


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        TrigramExtension(),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "private_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=snap_buy.core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=snap_buy.core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=256)),
                ("last_name", models.CharField(blank=True, max_length=256)),
                ("company_name", models.CharField(blank=True, max_length=256)),
                ("street_address_1", models.CharField(blank=True, max_length=256)),
                ("street_address_2", models.CharField(blank=True, max_length=256)),
                ("city", models.CharField(blank=True, max_length=256)),
                ("city_area", models.CharField(blank=True, max_length=128)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("country_area", models.CharField(blank=True, max_length=128)),
                (
                    "phone",
                    snap_buy.users.models.PossiblePhoneNumberField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=128,
                        region=None,
                    ),
                ),
                ("validation_skipped", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("pk",),
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["private_metadata"], name="address_p_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["metadata"], name="address_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["first_name", "last_name", "city", "country"],
                        name="address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=[
                            "company_name",
                            "street_address_1",
                            "street_address_2",
                            "city",
                            "postal_code",
                            "phone",
                        ],
                        name="warehouse_address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                ],
            },
        ),
    ]
