# Generated by Django 5.0.8 on 2024-08-10 13:01

import django.contrib.postgres.indexes
import django.utils.timezone
import django_countries.fields
import snap_buy.core.utils.json_serializer
import snap_buy.users.managers
import snap_buy.users.models
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Name of User"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", snap_buy.users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "private_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=snap_buy.core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=snap_buy.core.utils.json_serializer.CustomJsonEncoder,
                        null=True,
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=256)),
                ("last_name", models.CharField(blank=True, max_length=256)),
                ("company_name", models.CharField(blank=True, max_length=256)),
                ("street_address_1", models.CharField(blank=True, max_length=256)),
                ("street_address_2", models.CharField(blank=True, max_length=256)),
                ("city", models.CharField(blank=True, max_length=256)),
                ("city_area", models.CharField(blank=True, max_length=128)),
                ("postal_code", models.CharField(blank=True, max_length=20)),
                ("country", django_countries.fields.CountryField(max_length=2)),
                ("country_area", models.CharField(blank=True, max_length=128)),
                (
                    "phone",
                    snap_buy.users.models.PossiblePhoneNumberField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=128,
                        region=None,
                    ),
                ),
                ("validation_skipped", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("pk",),
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["private_metadata"], name="address_p_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["metadata"], name="address_meta_idx"
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["first_name", "last_name", "city", "country"],
                        name="address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        fields=[
                            "company_name",
                            "street_address_1",
                            "street_address_2",
                            "city",
                            "postal_code",
                            "phone",
                        ],
                        name="warehouse_address_search_gin",
                        opclasses=[
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                            "gin_trgm_ops",
                        ],
                    ),
                ],
            },
        ),
    ]
