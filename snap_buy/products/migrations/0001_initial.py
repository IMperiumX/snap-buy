# Generated by Django 4.2.2 on 2023-06-19 12:34

import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_measurement.models
import functools
import measurement.measures.mass
import mptt.fields
import snap_buy
import snap_buy.core.weight
import snap_buy.products.mixins
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("tax", "0001_initial"),
        ("channel", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "seo_title",
                    models.CharField(
                        blank=True,
                        max_length=70,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(70)],
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(300)],
                    ),
                ),
                (
                    "background_image",
                    models.ImageField(
                        max_length=250, upload_to=functools.partial(snap_buy.file_upload, *("category",), **{})
                    ),
                ),
                ("background_image_alt", models.CharField(blank=True, max_length=128)),
                ("description", models.JSONField(blank=True, null=True)),
                ("description_plaintext", models.TextField(blank=True)),
                ("name", models.CharField(max_length=250)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True, default=uuid.uuid4, max_length=255, unique=True, verbose_name="Slug"
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="products.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Categories",
            },
            managers=[
                ("object", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "seo_title",
                    models.CharField(
                        blank=True,
                        max_length=70,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(70)],
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(300)],
                    ),
                ),
                ("slug", models.SlugField(allow_unicode=True, max_length=255, unique=True)),
                (
                    "background_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=functools.partial(snap_buy.file_upload, *("collection-backgrounds",), **{}),
                    ),
                ),
                ("background_image_alt", models.CharField(blank=True, max_length=128)),
                ("name", models.CharField(max_length=250)),
                ("description", models.JSONField(blank=True, null=True)),
            ],
            options={
                "ordering": ("slug",),
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "external_reference",
                    models.CharField(blank=True, db_index=True, max_length=250, null=True, unique=True),
                ),
                (
                    "seo_title",
                    models.CharField(
                        blank=True,
                        max_length=70,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(70)],
                    ),
                ),
                (
                    "seo_description",
                    models.CharField(
                        blank=True,
                        max_length=300,
                        null=True,
                        validators=[django.core.validators.MaxLengthValidator(300)],
                    ),
                ),
                ("available", models.BooleanField(default=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("description", models.TextField(blank=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True, upload_to=functools.partial(snap_buy.file_upload, *("products",), **{})
                    ),
                ),
                ("name", models.CharField(max_length=250)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("rating", models.FloatField(blank=True, null=True)),
                ("slug", models.SlugField(max_length=255)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "weight",
                    django_measurement.models.MeasurementField(
                        blank=True, measurement=measurement.measures.mass.Mass, null=True
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        to="products.category",
                    ),
                ),
            ],
            options={
                "ordering": ("slug",),
            },
            bases=(snap_buy.products.mixins.ProductMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProductMedia",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(db_index=True, editable=False, null=True)),
                ("image", models.ImageField(blank=True, null=True, upload_to="products")),
                ("alt", models.CharField(blank=True, max_length=128)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("IMAGE", "An uploaded image or an URL to an image"),
                            ("VIDEO", "A URL to an external video"),
                        ],
                        default="IMAGE",
                        max_length=32,
                    ),
                ),
                ("external_url", models.CharField(blank=True, max_length=256, null=True)),
                ("oembed_data", models.JSONField(blank=True, default=dict)),
                ("to_remove", models.BooleanField(default=False)),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "ordering": ("sort_order", "pk"),
            },
            bases=(snap_buy.products.mixins.ProductMediaMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ProductVariant",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(db_index=True, editable=False, null=True)),
                (
                    "external_reference",
                    models.CharField(blank=True, db_index=True, max_length=250, null=True, unique=True),
                ),
                ("sku", models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ("name", models.CharField(blank=True, max_length=255)),
                ("track_inventory", models.BooleanField(default=True)),
                ("is_preorder", models.BooleanField(default=False)),
                ("preorder_end_date", models.DateTimeField(blank=True, null=True)),
                ("preorder_global_threshold", models.IntegerField(blank=True, null=True)),
                (
                    "quantity_limit_per_customer",
                    models.IntegerField(
                        blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "weight",
                    django_measurement.models.MeasurementField(
                        blank=True, measurement=measurement.measures.mass.Mass, null=True
                    ),
                ),
            ],
            options={
                "ordering": ("sort_order", "sku"),
            },
            bases=(snap_buy.products.mixins.ProductVariantMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Shipper",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("company_name", models.CharField(max_length=255)),
                ("phone", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "shipper",
                "verbose_name_plural": "shippers",
                "ordering": ("company_name",),
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name="VariantMedia",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "media",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variant_media",
                        to="products.productmedia",
                    ),
                ),
                (
                    "variant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variant_media",
                        to="products.productvariant",
                    ),
                ),
            ],
            options={
                "unique_together": {("variant", "media")},
            },
        ),
        migrations.AddField(
            model_name="productvariant",
            name="media",
            field=models.ManyToManyField(through="products.VariantMedia", to="products.productmedia"),
        ),
        migrations.AddField(
            model_name="productvariant",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="variants", to="products.product"
            ),
        ),
        migrations.CreateModel(
            name="ProductType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=250)),
                ("slug", models.SlugField(allow_unicode=True, max_length=255, unique=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[("normal", "A standard product type."), ("gift_card", "A gift card product type.")],
                        max_length=32,
                    ),
                ),
                ("has_variants", models.BooleanField(default=True)),
                ("is_shipping_required", models.BooleanField(default=True)),
                ("is_digital", models.BooleanField(default=False)),
                (
                    "weight",
                    django_measurement.models.MeasurementField(
                        default=snap_buy.core.weight.zero_weight, measurement=measurement.measures.mass.Mass
                    ),
                ),
                (
                    "tax_class",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="product_types",
                        to="tax.taxclass",
                    ),
                ),
            ],
            options={
                "ordering": ("slug",),
            },
        ),
        migrations.AddField(
            model_name="product",
            name="default_variant",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="products.productvariant",
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="product_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="products", to="products.producttype"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="tags",
            field=models.ManyToManyField(blank=True, to="products.tag"),
        ),
        migrations.AddField(
            model_name="product",
            name="tax_class",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="products",
                to="tax.taxclass",
            ),
        ),
        migrations.CreateModel(
            name="CollectionProduct",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("sort_order", models.IntegerField(db_index=True, editable=False, null=True)),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collectionproduct",
                        to="products.collection",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collectionproduct",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "unique_together": {("collection", "product")},
            },
            bases=(snap_buy.products.mixins.CollectionProductMixin, models.Model),
        ),
        migrations.AddField(
            model_name="collection",
            name="products",
            field=models.ManyToManyField(
                blank=True, related_name="collections", through="products.CollectionProduct", to="products.product"
            ),
        ),
        migrations.CreateModel(
            name="ProductVariantChannelListing",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("currency", models.CharField(max_length=3)),
                ("price_amount", models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True)),
                ("cost_price_amount", models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True)),
                ("preorder_quantity_threshold", models.IntegerField(blank=True, null=True)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="variant_listings",
                        to="channel.channel",
                    ),
                ),
                (
                    "variant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel_listings",
                        to="products.productvariant",
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "unique_together": {("variant", "channel")},
            },
        ),
        migrations.CreateModel(
            name="ProductChannelListing",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("is_published", models.BooleanField(default=False)),
                ("visible_in_listings", models.BooleanField(default=False)),
                ("available_for_purchase_at", models.DateTimeField(blank=True, null=True)),
                ("currency", models.CharField(max_length=3)),
                (
                    "discounted_price_amount",
                    models.DecimalField(blank=True, decimal_places=3, max_digits=12, null=True),
                ),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_listings",
                        to="channel.channel",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel_listings",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "indexes": [
                    models.Index(fields=["published_at"], name="products_pr_publish_d81339_idx"),
                    django.contrib.postgres.indexes.BTreeIndex(
                        fields=["discounted_price_amount"], name="products_pr_discoun_359692_btree"
                    ),
                ],
                "unique_together": {("product", "channel")},
            },
            bases=(snap_buy.products.mixins.ProductChannelListingMixin, models.Model),
        ),
        migrations.AlterIndexTogether(
            name="product",
            index_together={("id", "slug")},
        ),
        migrations.CreateModel(
            name="CollectionChannelListing",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                ("is_published", models.BooleanField(default=False)),
                (
                    "channel",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collection_listings",
                        to="channel.channel",
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="channel_listings",
                        to="products.collection",
                    ),
                ),
            ],
            options={
                "ordering": ("pk",),
                "unique_together": {("collection", "channel")},
            },
        ),
    ]
